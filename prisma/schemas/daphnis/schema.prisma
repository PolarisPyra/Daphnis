generator client {
  provider = "prisma-client-js"
  output   = "./generated/daphnis"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model chuni_rival_codes {
  id        Int     @id
  rivalCode String? @db.VarChar(255)
}

model chuni_static_characters {
  id          Int     @id
  str         String? @db.VarChar(255)
  imagePath   String? @db.VarChar(255)
  sortName    String? @db.VarChar(255)
  category    String? @db.VarChar(255)
  netOpenName String? @db.VarChar(255)
  rareType    String? @db.VarChar(255)
}

model chuni_static_mapicon {
  id        Int     @id
  str       String? @db.VarChar(255)
  imagePath String? @db.VarChar(255)
  sortName  String? @db.VarChar(255)
}

model chuni_static_nameplate {
  id          Int     @id
  str         String? @db.VarChar(255)
  imagePath   String? @db.VarChar(255)
  sortName    String? @db.VarChar(255)
  netOpenName String? @db.VarChar(255)
}

model chuni_static_systemvoice {
  id        Int     @id
  str       String? @db.VarChar(255)
  imagePath String? @db.VarChar(255)
  sortName  String? @db.VarChar(255)
}

model chuni_static_trophies {
  id          Int     @id
  str         String? @db.VarChar(255)
  rareType    String? @db.VarChar(255)
  netOpenName String? @db.VarChar(255)
}

model linksharingtoken {
  id             String    @id
  token          String    @unique(map: "LinkSharingToken_token_key")
  createdAt      DateTime  @default(now())
  userId         String
  tokenExpiredAt DateTime?
  playlogId      Int?
  user           user      @relation(fields: [userId], references: [id], map: "LinkSharingToken_userId_fkey")

  @@index([userId], map: "LinkSharingToken_userId_fkey")
}

model passwordresettoken {
  id        String    @id
  token     String    @unique(map: "PasswordResetToken_token_key")
  createdAt DateTime  @default(now())
  userId    String
  resetAt   DateTime?
  user      user      @relation(fields: [userId], references: [id], map: "PasswordResetToken_userId_fkey")

  @@index([userId], map: "PasswordResetToken_userId_fkey")
}

model session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model user {
  id                 String               @id
  username           String               @unique(map: "User_username_key")
  accessCode         String               @unique(map: "User_accessCode_key")
  UserId             Int                  @unique(map: "User_UserId_key")
  gameVersion        GameVersion          @default(Luminous)
  hashedPassword     String
  email              String               @unique(map: "User_email_key")
  role               user_role            @default(USER)
  linksharingtoken   linksharingtoken[]
  passwordresettoken passwordresettoken[]
  session            session[]
}

enum GameVersion {
  LuminousPlus
  Luminous
  SunPlus
  Sun
  NewPlus
  New
}

enum user_role {
  ADMIN
  USER
}
